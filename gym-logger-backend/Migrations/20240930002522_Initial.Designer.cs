// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using gym_logger_backend.Data;

#nullable disable

namespace gym_logger_backend.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20240930002522_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("gym_logger_backend.Models.User.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("gym_logger_backend.Models.User.UserBodyMeasurements", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("BodyFatPercentage")
                        .HasColumnType("double precision");

                    b.Property<double>("BodyMassIndex")
                        .HasColumnType("double precision");

                    b.Property<double>("ChestCircumference")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Height")
                        .HasColumnType("double precision");

                    b.Property<double>("HipCircumference")
                        .HasColumnType("double precision");

                    b.Property<double>("LeanBodyMass")
                        .HasColumnType("double precision");

                    b.Property<double>("LeftArmCircumference")
                        .HasColumnType("double precision");

                    b.Property<double>("LeftCalfCircumference")
                        .HasColumnType("double precision");

                    b.Property<double>("LeftThighCircumference")
                        .HasColumnType("double precision");

                    b.Property<double>("NeckCircumference")
                        .HasColumnType("double precision");

                    b.Property<double>("RightArmCircumference")
                        .HasColumnType("double precision");

                    b.Property<double>("RightCalfCircumference")
                        .HasColumnType("double precision");

                    b.Property<double>("RightThighCircumference")
                        .HasColumnType("double precision");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<double>("WaistCircumference")
                        .HasColumnType("double precision");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserBodyMeasurements");
                });

            modelBuilder.Entity("gym_logger_backend.Models.User.UserDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserDetails");
                });

            modelBuilder.Entity("gym_logger_backend.Models.User.UserBodyMeasurements", b =>
                {
                    b.HasOne("gym_logger_backend.Models.User.User", "User")
                        .WithMany("UserBodyMeasurements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("gym_logger_backend.Models.User.UserDetails", b =>
                {
                    b.HasOne("gym_logger_backend.Models.User.User", "User")
                        .WithOne("UserDetails")
                        .HasForeignKey("gym_logger_backend.Models.User.UserDetails", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("gym_logger_backend.Models.User.User", b =>
                {
                    b.Navigation("UserBodyMeasurements");

                    b.Navigation("UserDetails")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
